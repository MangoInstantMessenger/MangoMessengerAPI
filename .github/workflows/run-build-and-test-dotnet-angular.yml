name: Run Build and Test (.NET, Angular)

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:

jobs:
  build-and-lint-angular:
    name: Run Build and Lint Angular Project
    runs-on: ubuntu-latest
    steps:
      - name: 📝 Fetch Sources 📝
        uses: actions/checkout@v2

      - name: ⚙ Setup Node.js 16.x ⚙
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: 🔃 Install Node Modules 🔃
        run: |
          cd ./MangoAPI.Client
          npm ci

      - name: 🛠 Build Angular Project (Production) 🛠
        run: |
          cd ./MangoAPI.Client
          npm run build --production

      - name: 🔆 Lint Angular Project 🔆
        run: |
          cd ./MangoAPI.Client
          npm run lint

      - name: Download sonar scanner
        uses: suisei-cn/actions-download-file@v1
        with:
          url: 'https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip'
          target: public/

      - name: Unzip Sonar Scanner
        run: |
          cd public
          mkdir sonar-scanner-unzip
          chmod 777 sonar-scanner-unzip
          unzip sonar-scanner-cli-4.7.0.2747-linux.zip -d sonar-scanner-unzip

      - name: Run Sonar Analyzer
        run: |
          cd MangoAPI.Client
          ../public/sonar-scanner-unzip/sonar-scanner-4.7.0.2747-linux/bin/sonar-scanner \
            -Dsonar.organization=mangoinstantmessenger \
            -Dsonar.projectKey=MangoAPI.Client \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-and-test-dotnet:
    name: Run Build and Test .NET
    needs: build-and-lint-angular
    runs-on: ubuntu-latest
    steps:
      - name: 📝 Fetch Sources 📝
        uses: actions/checkout@v2

      - name: ⚙ Setup .NET 6.0 SDK ⚙
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: 🔄 Restore Nuget Packages 🔄
        run: dotnet restore

      - name: 🛠 Build .NET Project 🛠
        run: |
          dotnet build --no-restore /p:ContinuousIntegrationBuild=true --configuration Release

      - name: 🐋 Run SQLServer docker container 🐋
        run: |
          docker run -e 'SA_PASSWORD=x2yiJt!Fs' -e ACCEPT_EULA=y --name mango-mssql-db --hostname mango-mssql-db -p 1433:1433 -d mcr.microsoft.com/mssql/server:2019-latest

      - name: 🕔 Wait for database to be ready 🕔
        run: pwsh ./build/docker/mssql-docker/wait_database.ps1

      - name: 🛠 Building EFBundle & Applying EF Core Migrations 🛠
        run: |
          cd ./MangoAPI.Infrastructure
          dotnet tool install --global dotnet-ef
          dotnet ef migrations bundle --self-contained -r linux-x64
          ./efbundle
          rm efbundle
        env:
          MANGO_DATABASE_URL: ${{ secrets.MANGO_INTEGRATION_TESTS_DATABASE_URL }}
          MANGO_SEED_PASSWORD: ${{ secrets.MANGO_SEED_PASSWORD }}

      - name: ✅ Run Integration Tests ✅
        run: dotnet test MangoAPI.IntegrationTests/MangoAPI.IntegrationTests.csproj  /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=lcov
        env:
          MANGO_JWT_ISSUER: ${{ secrets.MANGO_JWT_ISSUER }}
          MANGO_JWT_AUDIENCE: ${{ secrets.MANGO_JWT_AUDIENCE }}
          MANGO_JWT_SIGN_KEY: ${{ secrets.MANGO_JWT_SIGN_KEY }}
          MANGO_EMAIL_NOTIFICATIONS_ADDRESS: ${{ secrets.MANGO_EMAIL_NOTIFICATIONS_ADDRESS }}
          MANGO_FRONTEND_ADDRESS: ${{ secrets.MANGO_FRONTEND_ADDRESS }}
          MANGO_DATABASE_URL: ${{ secrets.MANGO_DATABASE_URL }}
          MANGO_SEED_PASSWORD: ${{ secrets.MANGO_SEED_PASSWORD }}
          MANGO_BLOB_URL: ${{ secrets.MANGO_BLOB_URL }}
          MANGO_BLOB_CONTAINER: ${{ secrets.MANGO_BLOB_CONTAINER }}
          MANGO_BLOB_ACCESS: ${{ secrets.MANGO_BLOB_ACCESS }}
          MANGO_MAILGUN_API_KEY: ${{ secrets.MANGO_MAILGUN_API_KEY }}
          MANGO_MAILGUN_API_BASE_URL: ${{ secrets.MANGO_MAILGUN_API_BASE_URL }}
          MANGO_MAILGUN_API_DOMAIN: ${{ secrets.MANGO_MAILGUN_API_DOMAIN }}
          MANGO_INTEGRATION_TESTS_DATABASE_URL: ${{ secrets.MANGO_INTEGRATION_TESTS_DATABASE_URL }}

      - name: ✨ Publish coverage report to Coveralls ✨
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: MangoAPI.IntegrationTests/TestResults/coverage.info

      - name: ⚙ Set up JDK 11 ⚙
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: 📝 Cache SonarCloud packages 📝
        uses: actions/cache@v1
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: 📝 Cache SonarCloud scanner 📝
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: ⚙ Install SonarCloud scanner ⚙
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./.sonar/scanner
          chmod a+rwx ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: 🔍 Analyze project 🔍
        shell: bash
        run: ./run-sonarqube-dotnet.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  drop-artifacts:
    name: Drop Artifacts
    runs-on: ubuntu-latest
    needs: [ build-and-lint-angular, build-and-test-dotnet ]
    steps:
      - name: 📝 Fetch Sources 📝
        uses: actions/checkout@v2

      - name: ⚙ Setup Node.js 16.x ⚙
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: ⚙ Setup .NET 6.0 SDK ⚙
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: 🔃 Install Node Modules 🔃
        run: |
          cd ./MangoAPI.Client
          npm ci

      - name: 🛠 Build Angular Project (Production) 🛠
        run: |
          cd ./MangoAPI.Client
          npm run build --production

      - name: 🛠 Publish .NET Project for Linux 🛠
        run: |
          dotnet publish "MangoAPI.Presentation/MangoAPI.Presentation.csproj" -r linux-x64 -o mango-linux-build/src

      - name: Drop Artifact
        uses: actions/upload-artifact@v3
        with:
          name: mango-dotnet-build
          path: mango-linux-build/src